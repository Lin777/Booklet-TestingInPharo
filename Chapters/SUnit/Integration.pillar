!! Getting more with Continuous Integration

Once you have tests you want to run them as many times as possible. 
In this chapter we should the basic setup to execute your tests on Travis integration. 

!!! Setup	

First you should enable the travis services on your github account. We sketch here the process. 
Better refer to the documentation since the process was changed in the past.

It usually means that: 
- you should have an account on travis-ci.com (travis-ci.org has been deprecated).
- you should get a token from Github ==GH_Token== that you add to your travis account.
- you have to encrypt (using ==travis encrypt key==) your repository with the one time shown github key. 

Then you should add configuration files, for linux and mac a ==\.travis.yml== file and 
 windows a ==appveyor.yml== one.

!!!  With Travis
Here is a configuration file for travis. It should be named ==\.travis.yml==.

[[[
language: smalltalk
sudo: false

# Select operating system(s)
os:
  - linux
  - osx

# Select compatible Smalltalk image(s)
smalltalk:

  - Pharo32-8.0
  - Pharo-7.0
  - Pharo-6.1

  - Pharo64-8.0
  - Pharo64-7.0

#  - GemStone-3.3.0
#  - GemStone-3.2.12
#  - GemStone-3.1.0.6

# Uncomment to enable caching (only useful for GemStone builds (3x faster))
#cache:
#  directories:
#    - $SMALLTALK_CI_CACHE
]]]

!!! With Appveyor 
If you want to validate your tests on Windows, you  should create the file ==appveyor.yml== file. Here is an example.

[[[
environment:
  CYG_ROOT: C:\cygwin
  CYG_BASH: C:\cygwin\bin\bash
  CYG_CACHE: C:\cygwin\var\cache\setup
  CYG_EXE: C:\cygwin\setup-x86.exe
  CYG_MIRROR: http://cygwin.mirror.constant.com
  SCI_RUN: /cygdrive/c/smalltalkCI-master/run.sh
  matrix:
    - SMALLTALK: Pharo-6.1
    - SMALLTALK: Pharo-7.0

platform:
  - x86

install:
  - '%CYG_EXE% -dgnqNO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P unzip'
  - ps: Start-FileDownload "https://github.com/hpi-swa/smalltalkCI/archive/master.zip" "C:\smalltalkCI.zip"
  - 7z x C:\smalltalkCI.zip -oC:\ -y > NULL

build: false

test_script:
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; $SCI_RUN"'
]]]

!!! Coverage 
Finally one you have automated servers up and running you can take advantage of other services such as coverage. 
You should create an account to coverall and enable the communication between coverall and the project you want to cover.
 
To specify which package should be validated and measured you should add another configuration file named ==\.smalltalk.ston==. Here is an example for the project ==Containers-Stack==. We indicate the baseline as well as the package to measure (here =='Containers-Stack'==).

[[[
SmalltalkCISpec {
  #loading : [
    SCIMetacelloLoadSpec {
      #baseline : 'ContainersStack',
      #directory : 'src',
      #platforms : [ #pharo ]
    }
  ],
  #testing : {
    #coverage : {
      #packages : [ 'Containers-Stack' ]
    }
  }
}
]]]


