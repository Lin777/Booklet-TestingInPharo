!! UI testing
@cha:uitesting

Developers often think that testing UI is difficult. This is true that fully testing the placement and layout of widgets can be tedious. Testing testing the logic of an application and in particular the interaction logic
is possible and this is what we will show in this chapter. We show that testing Spec application is simple 
and effective.


!!! Testing Spec
Tests are key to ensure that everything works correctly. In addition, they free us from the fear to break something without being warned about it. Tests support refactorings. While such facts are general and applicable to many domains, they also true for user interfaces.



!!!! Spec Architecture

Spec is based on an architecture with three different layers as shown in Figure~*@fig:Architecture*: 
- ""Presenters:"" Presenters defined the interaction logic and manipulate domain objects. They access backwidgets but via an API that is specified by Adapters.
- ""Adapters:"" Adapters are objects exposing low-level back-end widgets. They are a bridge between presenters and low-level widgets.
- ""Backend widgets"". Backend widgets are plain widgets that can be used without Spec.

+Spec Architecture (to be redone).>file://figures/Architecture.png|width=75|label=fig:Architecture+

!!!! Three roles and concerns
To help you understand the different possibilities of testing that you can engage, we identify the following roles and their related concerned

- ""Spec User."" The Spec user is a developer that builds a new application. It defines the logic of his application by assembling together.
- ""Spec Developer."" The Spec developer is more concerned with the development of new Spec presenter and their link with the adapter.
- ""Widget Developer."" The widget developer is concerned about the logic and working of a given widget is a given back-end.

+UI elements under test.>file://figures/UI.png|width=75|label=fig:UI+

!!! The Spec user

- He does not care about backends
- My UI should work with any backend !
- I assume all widgets work ok...
- My UI updates if my model changes My model updates if my UI changes

!!! Example

- Click the button add an element to the list
- Select an element in the list should populate form
- Changing values in the form should change the objects in the list

!!!! Spec user test 1:
Select an element in the list should populate form

[[[
testClickOnLaunchConfigurationListItemSetsFormName
	| name |
	name := 'test'.
	image addLaunchConfiguration: (PhLaunchConfiguration named: name).
	editor refreshList.
	
	editor configurationList clickItem: 3.
	self assert: editor form nameInput text equals: name
]]]

!!!! Spec user test 2: 
Click the button add an element to the list

[[[
testClickAddButtonCreatesNewLaunchConfiguration
	
	| old |
	old := image launchConfigurations size.
	editor addButton click.
	self assert: image launchCOnfigurations size euqals: old + 1
]]]


!!!! Spec user test 3:
Changing values in the form should change the objects in the list

[[[
testEditConfigurationNameUpdatesListItem
	| newName |
	newName := 'some name'.
	editor addButton click.
	editor configurationList clickItem: 2.
	editor fomr nameInput text: newName.
	
	self 
		assert: (editor configurationList displayValueAt: 2)
		equals: newName
]]]


!!! Concerns for the Spec developer

- I should write a presenter that works with many backends
- « I should agree with all backends! »
- I make sure widgets work OK
- My widget updates if my model changes My model updates if my Widget cha


+List Presenter.>file://figures/ListPresenter.png|width=75|label=fig:ListPresenter+

!!!! Example of Presenter

When we consider a list presenter as shown in Figure *@fig:ListPresenter*.
- Changing the selection should raise an event.
- The argument of the event should contain the changes.

!!!! Example of Presenter test 1.
Changing the selection should raise an event. 

[[[
testSetSelectIndexRaisesSelectionChangeEventOnlyOnce

	| count |
	count := 0.
	presenter 
		whenSelectionChangedDo: [ count := count + 1].
	presenter selectIndex: 1. 
	self assert: count equals: 1
]]]

!!!! Example of Presenter test 2.
The argument of the event should contain the changes

[[[
testSetSelectIndexRaisesSelectionItemChangeEventWithSelectedIndex

	| selectedItem |
	presenter
	whenSelectionChangedDo:
]]]